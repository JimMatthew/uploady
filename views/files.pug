doctype html
html
  head
    title File Manager
    link(rel="stylesheet" href="/style.css")
  body
    h1 File Manager

    // Breadcrumb for easy navigation
    if breadcrumb.length
      nav
        each crumb, i in breadcrumb
          a(href=`${crumb.path}`) #{crumb.name}
          if i < breadcrumb.length - 1
            |  / 

    h2 Current Directory: #{relativePath}

    // Form to create a new folder
    form(action="/create-folder", method="POST")
      input(type="text", name="folderName", placeholder="New folder name")
      input#rpath(type="hidden",  name="currentPath", value=relativePath)
      button(type="submit") Create Folder
    
    form(action=`/upload` method="POST" enctype="multipart/form-data")
      input(type="hidden",  name="currentPath", value=relativePath)
    #drop-zone
      p Drag and drop your files here, or click to select files.
      input#file-input(type='file', hidden)

    script.
      const dropZone = document.getElementById('drop-zone');
      const fileInput = document.getElementById('file-input');
      //console.log('rpath: '+document.getElementById('rpath').value)
      //const relpath = document.querySelector('#rpath') || ''

      // Prevent default behavior for drag and drops
      ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(event => {
        dropZone.addEventListener(event, e => e.preventDefault());
      });

        // Highlight drop zone when dragging files
      ['dragenter', 'dragover'].forEach(event => {
        dropZone.addEventListener(event, () => dropZone.classList.add('highlight'));
      });

      ['dragleave', 'drop'].forEach(event => {
        dropZone.addEventListener(event, () => dropZone.classList.remove('highlight'));
      });

        // Handle drop event
      dropZone.addEventListener('drop', event => {
        const files = event.dataTransfer.files;
        uploadFile(files[0], 'test');
      });

        // Handle click to open file selector
      dropZone.addEventListener('click', () => {
        fileInput.click();
      });

      fileInput.addEventListener('change', () => {
        uploadFile(fileInput.files[0], 'test');
      });

        // Upload the file via AJAX
      function uploadFile(file, relativePath) {
        const formData = new FormData();
        formData.append('files', file);
        formData.append('folderPath', relativePath)
        //formData.append('relativePath', relativePath)
        console.log('rp - '+relativePath)
        fetch('/upload', {
          method: 'POST',
          body: formData
        }).then(response => {
          if (response.ok) {
            window.location.href = '/'
          } else {
            alert('File upload failed.');
          }
        }).catch(error => {
          alert('Error uploading file.');
        });
      }  
    p 
      a(href='/links') Show All Shared files
    h3 Folders
    if folders.length
      ul
        each folder in folders
          li
            a(href=`${currentPath}/${folder}`) #{folder}
    else
      p No folders.

    h3 Files
    if files.length
     table
          thead
            tr
              th File Name
              th Size (KB)
              th Date Modified
              th Actions
          tbody
            each file in files
              tr
                td
                  a(href=`/download/${file}`) #{file}
                td #{file.size} KB
                td #{file.date}
                td
                  form(action=`/delete/${file.name}` method="POST" style="display:inline")
                    input(type="hidden" name="fileName" value=file)
                    button(type="submit") Delete
                  form(action=`/share` method="POST" style="display:inline")
                    input(type="hidden" name="fileName" value=file)
                    button(type="submit") Share
    else
      p No files.

    p
      a(href="/files") Back to Root